# Gesture Unlock System Documentation

## Overview
The Gesture Unlock System is an embedded security system that uses gyroscopic data to authenticate users through motion gestures. Users can record a gesture pattern and later unlock the system by reproducing the same gesture.

## Hardware Requirements
- STM32F429ZI Development Board
- LCD Display with Touch Screen (LCD_DISCO_F429ZI)
- Gyroscope Sensor (L3GD20)
- LEDs for status indication (LED1, LED2)

## System Architecture

### Core Components

#### 1. Gyroscope Module (gyro.h, gyro.cpp)
- Handles raw gyroscope data acquisition
- Performs calibration and data processing
- Configures sensor parameters
- Provides data conversion utilities

Key Functions:
- `InitiateGyroscope()`: Initializes gyroscope with specified parameters
- `CalibrateGyroscope()`: Performs zero-rate level calibration
- `GetCalibratedRawData()`: Retrieves and processes raw sensor data
- `ConvertToDPS()`: Converts raw data to degrees per second

#### 2. LCD and Touch Interface (lcd_touchscreen.h, lcd_touchscreen.cpp)
- Manages display output and touch input
- Handles UI elements (buttons, messages)
- Provides status feedback to users

Key Functions:
- `lcd_init()`: Initializes LCD display
- `touch_screen_init()`: Sets up touch screen functionality
- `draw_button()`: Creates interactive buttons
- `updateLCD()`: Updates display messages

#### 3. Main Control System (main.cpp)
- Coordinates system components
- Manages gesture recording and verification
- Handles user interaction and system state

### Key Features

#### Gesture Recording
- Records 3-axis motion data (X, Y, Z)
- Filters and processes raw sensor data
- Stores calibrated gesture patterns

#### Authentication
- Compares recorded and input gestures
- Uses correlation analysis for pattern matching
- Provides visual feedback on authentication status

#### User Interface
- Two-button interface (Record/Unlock)
- LED indicators for system status
- Real-time feedback through LCD display

## System States

### 1. Idle State
- Green LED: No gesture key stored
- Red LED: Gesture key present
- System ready for input

### 2. Recording State
- Activated by "RECORD" button
- 3-second countdown before recording
- 5-second recording window
- Automatic calibration before recording

### 3. Unlock State
- Activated by "UNLOCK" button
- Compares input gesture with stored pattern
- Success/Failure indication through LEDs and display

## Technical Specifications

### Gyroscope Configuration
- Sample Rate: 200Hz
- Full Scale Range: Â±500 dps
- Cutoff Frequency: 50Hz
- Resolution: 16-bit per axis

### Authentication Parameters
- Correlation Threshold: 0.3 (adjustable)
- Three-axis comparison required
- Automatic data trimming for noise reduction

## Implementation Details

### Event Flags
```cpp
#define KEY_FLAG 1       // Gesture recording
#define UNLOCK_FLAG 2    // Authentication attempt
#define ERASE_FLAG 4     // Clear stored gesture
#define DATA_READY_FLAG 8 // Sensor data available
```

### Threading Model
- Main Thread: System initialization and maintenance
- Gyroscope Thread: Data acquisition and processing
- Touch Screen Thread: User input handling

### Data Processing Pipeline
1. Raw data acquisition (16-bit per axis)
2. Zero-rate level compensation
3. Threshold filtering
4. Conversion to degrees per second
5. Pattern correlation analysis

## Usage Instructions

### Recording a New Gesture
1. Press "RECORD" button
2. Wait for calibration
3. Follow countdown timer
4. Perform gesture during 5-second window
5. Wait for confirmation

### Unlocking the System
1. Press "UNLOCK" button
2. Perform previously recorded gesture
3. Observe authentication result
4. System provides immediate feedback

### Error Handling
- Missing Gesture Key: "NO KEY SAVED" message
- Failed Authentication: "UNLOCK: FAILED" message
- Calibration Issues: Auto-retry with feedback

## Performance Considerations

### Accuracy Factors
- Gesture consistency
- Environmental conditions
- Sensor calibration quality
- Movement speed
- Pattern complexity

### Power Management
- Sleep modes between operations
- Sensor power-down when idle
- Display brightness management
- LED status indicators

## Future Improvements
1. Enhanced pattern recognition algorithms
2. Multiple gesture storage capability
3. Gesture complexity analysis
4. Power optimization
5. Security hardening measures

## Troubleshooting

### Common Issues
1. Failed Calibration
   - Solution: Ensure device is stationary during calibration
   
2. Inconsistent Recognition
   - Solution: Adjust correlation threshold
   - Solution: Improve gesture consistency

3. Touch Screen Unresponsive
   - Solution: Check initialization sequence
   - Solution: Verify hardware connections

### Debug Tools
- Serial output for correlation values
- LED status indicators
- LCD status messages
- Error code reporting

## License
MIT License - See source files for full license text